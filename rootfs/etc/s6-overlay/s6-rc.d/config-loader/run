#!/command/with-contend bashio

# local file paths
readonly avahi_templates_path=/config/templates/avahi
readonly cups_templates_path=/config/templates/cups

# HA File paths
readonly real_config_path=/config
readonly real_cups_path=/config/cups
readonly real_avahi_path=/config/avahi

# CUPS paths
readonly cups_client_cfg=client.conf
readonly cups_daemon_cfg=cupsd.conf
readonly cups_files_cfg=cups-files.conf

# Avahi paths
readonly avahi_daemon_cfg=avahi-daemon.conf

function autoconf_setup() {

  hostname=$(bashio::info.hostname)
  echo "hostname" "$hostname" >>/config/api.results
  printenv | tee /config/env.txt

  # # Get all possible hostages from configuration
  result=$(bashio::api.supervisor GET /core/api/config true || true)
  # api_config_result=$(curl -X GET -H "Authorization: Bearer ${SUPERVISOR_TOKEN}" -H "Content-Type: application/json" http://supervisor/core/api/config)
  # echo "$api_config_result" >>/config/api.results
  echo "result" "$result" >/config/api.results

  interfaces=$(bashio::network.interfaces)
  echo "interfaces" "$interfaces" >>/config/api.results

  # # bashio::log.info "__BASHIO_SUPERVISOR_TOKEN $__BASHIO_SUPERVISOR_TOKEN"

  # internal=$(bashio::jq "$api_config_result" '.internal_url' | cut -d'/' -f3 | cut -d':' -f1)
  # external=$(bashio::jq "$api_config_result" '.external_url' | cut -d'/' -f3 | cut -d':' -f1)

}

function autoconf_avahi() {
  host="${hostname%%.*}"

  use_host_dbus=no
  if bashio::config.has_value 'use_host_dbus'; then

    temp=$(bashio::config 'use_host_dbus')
    bashio::log.info use_host_dbus "$temp"
    if [ "$temp" == "true" ]; then
      use_host_dbus=yes
    fi

  fi
  bashio::log.info use_host_dbus "$use_host_dbus"

  # Fill config file templates with runtime data
  config=$(jq --arg internal "$internal" --arg external "$external" --arg hostname "$host" --arg use_host_dbus "$use_host_dbus" \
    '{internal: $internal, external: $external, hostname: $hostname, use_host_dbus: $use_host_dbus}' \
    /data/options.json)
  #if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then

  echo "$config" | tempio \
    -template "$avahi_templates_path/$avahi_daemon_cfg".tempio \
    -out "$real_avahi_path/$avahi_daemon_cfg"
}

function autoconf_cups() {
  # Fill config file templates with runtime data
  internal=$hostname
  external=$hostname
  privkey="/ssl/privkey.pem"
  pubkey="/ssl/fullchain.pem"
  log_level="emerg"

  if bashio::config.has_value 'log_level'; then
    log_level=$(bashio::config 'log_level')
  fi

  config=$(jq --arg internal "$internal" --arg external "$external" --arg hostname "$hostname" --arg privkey "$privkey" --arg pubkey "$pubkey" --arg log_level "$log_level" \
    '{internal: $internal, external: $external, hostname: $hostname, privkey: $privkey, pubkey: $pubkey, log_level: $log_level }' \
    /data/options.json)

  echo "$config" | tempio \
    -template "$cups_templates_path/$cups_client_cfg.tempio" \
    -out "$real_cups_path/$cups_client_cfg"

  # if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then
  echo "$config" | tempio \
    -template "$cups_templates_path/$cups_daemon_cfg.tempio" \
    -out "$real_cups_path/$cups_daemon_cfg"
  # fi

  echo "$config" | tempio \
    -template "$cups_templates_path/$cups_files_cfg.tempio" \
    -out "$real_cups_path/$cups_files_cfg"
}

function run_setup() {
  if [ ! -d "$real_config_path" ]; then
    mkdir -p "$real_config_path"
  fi

  autoconf_setup
  autoconf_cups
  autoconf_avahi
}

run_setup
