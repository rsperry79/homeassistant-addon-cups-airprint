#!/command/with-contend bashio

# local file paths
readonly templates_path=/usr/templates
readonly avahi_templates_path=/config/templates/avahi
readonly cups_templates_path=/config/templates/cups
readonly cups_cfg_path=/etc/cups
readonly cups_ssl_path=/etc/cups/ssl
readonly avahi_cfg_path=/etc/avahi

# HA File paths
readonly real_config_path=/config
readonly real_cups_path=/config/cups
readonly real_cups_log_path=/config/cups/logs
readonly real_ssl_path=/ssl
readonly real_avahi_path=/config/avahi

# CUPS paths
readonly cups_client_cfg=client.conf
readonly cups_daemon_cfg=cupsd.conf
readonly cups_files_cfg=cups-files.conf

# Avahi paths
readonly avahi_daemon_cfg=avahi-daemon.conf

function autoconf_setup() {

  hostname=$(bashio::info.hostname)
  echo "hostname" "$hostname" >>/config/api.results
  printenv | tee /config/env.txt

  # # Get all possible hostages from configuration
  # result=$(bashio::api.supervisor GET /core/api/config true || true)
  api_config_result=$(curl -X GET -H "Authorization: Bearer ${SUPERVISOR_TOKEN}" -H "Content-Type: application/json" http://supervisor/core/api/config)
  echo "$api_config_result" >>/config/api.results
  # interfaces=$(bashio::network.interfaces)
  # echo "interfaces" "$interfaces" >>/config/api.results

  # bashio::log.info "__BASHIO_SUPERVISOR_TOKEN $__BASHIO_SUPERVISOR_TOKEN"

  internal=$(bashio::jq "$api_config_result" '.internal_url' | cut -d'/' -f3 | cut -d':' -f1)
  external=$(bashio::jq "$api_config_result" '.external_url' | cut -d'/' -f3 | cut -d':' -f1)

}

function autoconf_avahi() {
  host="${hostname%%.*}"
  # Fill config file templates with runtime data
  config=$(jq --arg internal "$internal" --arg external "$external" --arg hostname "$host" \
    '{internal: $internal, external: $external, hostname: $hostname}' \
    /data/options.json)
  #if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then

  echo "$config" | tempio \
    -template "$avahi_templates_path/$avahi_daemon_cfg".tempio \
    -out "$real_avahi_path/$avahi_daemon_cfg"
}

function autoconf_cups() {
  # Fill config file templates with runtime data
  config=$(jq --arg internal "$internal" --arg external "$external" --arg hostname "$hostname" \
    '{internal: $internal, external: $external, hostname: $hostname}' \
    /data/options.json)

  echo "$config" | tempio \
    -template "$cups_templates_path/$cups_client_cfg.tempio" \
    -out "$real_cups_path/$cups_client_cfg"

  # if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then
  echo "$config" | tempio \
    -template "$cups_templates_path/$cups_daemon_cfg.tempio" \
    -out "$real_cups_path/$cups_daemon_cfg"
  # fi

  echo "$config" | tempio \
    -template "$cups_templates_path/$cups_files_cfg.tempio" \
    -out "$real_cups_path/$cups_files_cfg"

}

function ensure_avahi_dirs() {
  # AVAHI Files
  if [ ! -d "$real_avahi_path" ]; then
    mkdir -p "$real_avahi_path"
  fi

  # if [ -L "$avahi_cfg_path" ] && [ -d "$avahi_cfg_path" ]; then
  #   bashio::log.info "$avahi_cfg_path is a valid symbolic link"
  # else
  #   if [ -L "$avahi_cfg_path" ]; then
  #     unlink "$avahi_cfg_path"
  #     bashio::log.info "$avahi_cfg_path unlinked"
  #   else
  #     rm -rf "$avahi_cfg_path"
  #     bashio::log.info "$avahi_cfg_path removed"
  #   fi

  #   bashio::log.info "$avahi_cfg_path linking"
  #   ln -sn "$real_avahi_path" "$avahi_cfg_path"
  # fi
}

function ensure_cups_dirs() {
  # CUPS Files
  if [ ! -d "$real_cups_path" ]; then
    mkdir -p "$real_cups_path"
  fi

  # # Config
  # if [ -L "$cups_cfg_path" ] && [ -d "$cups_cfg_path" ]; then
  #   bashio::log.info "$cups_cfg_path is a valid symbolic link"
  # else
  #   bashio::log.info "$cups_cfg_path is a not valid symbolic link"

  #   if [ -L "$cups_cfg_path" ]; then
  #     bashio::log.info "$cups_cfg_path unlinking"
  #     unlink "$cups_cfg_path"
  #   else
  #     bashio::log.info "$cups_cfg_path removing"
  #     rm -rf "$cups_cfg_path"
  #   fi

  #   ln -sn "$real_cups_path" "$cups_cfg_path"
  #   bashio::log.info "$cups_cfg_path linking"
  # fi

  # SSL
  if [ -L "$cups_ssl_path" ] && [ -d "$cups_ssl_path" ]; then
    bashio::log.info "$cups_ssl_path is a valid symbolic link"
  else
    if [ -L "$cups_ssl_path" ]; then
      unlink "$cups_ssl_path"
    else
      rm -rf "$cups_ssl_path"
    fi
    ln -sn "$real_ssl_path" "$cups_ssl_path"
  fi
  # LOGS
  if [ ! -d "$real_cups_log_path" ]; then
    mkdir -p "$real_cups_log_path"
  fi
}

function ensure_templates() {
  # Avahi templates
  if [ ! -d "$avahi_templates_path" ]; then
    mkdir -p "$avahi_templates_path"
  fi

  if [ ! -e "$avahi_templates_path/$avahi_daemon_cfg".tempio ]; then
    cp "$templates_path/avahi/$avahi_daemon_cfg".tempio "$avahi_templates_path/$avahi_daemon_cfg".tempio
  fi

  # CUPS templates
  if [ ! -d "$cups_templates_path" ]; then
    mkdir -p "$cups_templates_path"
  fi

  if [ ! -e "$cups_templates_path/$cups_client_cfg".tempio ]; then
    cp "$templates_path/cups/$cups_client_cfg".tempio "$cups_templates_path/$avahi_daemon_cfg".tempio
  fi

  if [ ! -e "$cups_templates_path/$cups_daemon_cfg".tempio ]; then
    cp "$templates_path/cups/$cups_daemon_cfg".tempio "$cups_templates_path/$cups_daemon_cfg".tempio
  fi

  if [ ! -e "$cups_templates_path/$cups_files_cfg".tempio ]; then
    cp "$templates_path/cups/$cups_files_cfg".tempio "$cups_templates_path/$cups_files_cfg".tempio
  fi

}

function run_setup() {
  if [ ! -d "$real_config_path" ]; then
    mkdir -p "$real_config_path"
  fi

  ensure_templates
  ensure_cups_dirs
  ensure_avahi_dirs

  autoconf_setup
  autoconf_cups
  autoconf_avahi
}

run_setup
