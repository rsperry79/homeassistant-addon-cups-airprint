#!/command/with-contend bashio

# local file paths
readonly avahi_templates_path=/usr/share/avahi
readonly cups_templates_path=/usr/share/cups
readonly cups_cfg_path=/etc/cups
readonly cups_ssl_path=/etc/cups/ssl
readonly avahi_cfg_path=/etc/avahi

# HA File paths
readonly real_config_path=/config
readonly real_cups_path=/config/cups
readonly real_cups_log_path=/config/cups/logs
readonly real_ssl_path=/ssl
readonly real_avahi_path=/config/avahi

# CUPS paths

readonly cups_client_cfg=client.conf
readonly cups_daemon_cfg=cupsd.conf
readonly cups_files_cfg=cups-files.conf

# Avahi paths
readonly avahi_daemon_cfg=avahi-daemon.conf

function setup_cups() {
  # CUPS Files
  if [ ! -d "$real_cups_path" ]; then
    mkdir -p "$real_cups_path"
  fi

  if [ -L "$cups_cfg_path" ] && [ -d "$cups_cfg_path" ]; then
    bashio::log.info "$cups_cfg_path is a valid symbolic link"
  else
    bashio::log.info "$cups_cfg_path is a not valid symbolic link"

    if [ -L "$cups_cfg_path" ]; then
      bashio::log.info "$cups_cfg_path unlinking"
      unlink "$cups_cfg_path"
    else
      bashio::log.info "$cups_cfg_path removing"
      rm -rf "$cups_cfg_path"
    fi

    ln -sn "$real_cups_path" "$cups_cfg_path"
    bashio::log.info "$cups_cfg_path linking"
  fi

  if [ ! -e "$real_cups_path/$cups_client_cfg" ]; then
    cp "$cups_templates_path/$cups_client_cfg" "$real_cups_path/$cups_client_cfg"
    bashio::log.info "Copied $cups_client_cfg"
  else
    bashio::log.info "$cups_client_cfg exists"
  fi

  # if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then
  #   cp "$cups_templates_path/$cups_daemon_cfg" "$real_cups_path/$cups_daemon_cfg"
  #   bashio::log.info "Copied $cups_daemon_cfg"
  # fi

  autoconf_cups

  if [ ! -e "$real_cups_path/$cups_files_cfg" ]; then
    cp "$cups_templates_path/$cups_files_cfg" "$real_cups_path/$cups_files_cfg"
    bashio::log.info "Copied $cups_files_cfg"
  fi

  if [ -L "$cups_ssl_path" ] && [ -d "$cups_ssl_path" ]; then
    bashio::log.info "$cups_ssl_path is a valid symbolic link"
  else
    if [ -L "$cups_ssl_path" ]; then
      unlink "$cups_ssl_path"
    else
      rm -rf "$cups_ssl_path"
    fi
    ln -sn "$real_ssl_path" "$cups_ssl_path"
  fi

  if [ ! -d "$real_cups_log_path" ]; then
    mkdir -p "$real_cups_log_path"
  fi
}
function autoconf_setup() {
  hostname=$(bashio::info.hostname)

  # Get all possible hostnames from configuration
  result=$(bashio::api.supervisor GET /core/api/config true || true)
  echo "$result" >/config/api.results

  internal=$(bashio::jq "$result" '.internal_url' | cut -d'/' -f3 | cut -d':' -f1)
  external=$(bashio::jq "$result" '.external_url' | cut -d'/' -f3 | cut -d':' -f1)
  # Fill config file templates with runtime data
  config=$(jq --arg internal "$internal" --arg external "$external" --arg hostname "$hostname" \
    '{internal: $internal, external: $external, hostname: $hostname}' \
    /data/options.json)
}

function autoconf_cups() {
  if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then
    echo "$config" | tempio \
      -template "$cups_templates_path/$cups_daemon_cfg.tempio" \
      -out "$real_cups_path/$cups_daemon_cfg"
  fi
}

function autoconf_avahi() {
  if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then

    echo "$config" | tempio \
      -template "$avahi_templates_path/$avahi_daemon_cfg.tempio" \
      -out "$real_avahi_path/$avahi_daemon_cfg"
  fi
}

function setup_avahi() {
  # AVAHI Files
  if [ ! -d "$real_avahi_path" ]; then
    mkdir -p "$real_avahi_path"
  fi

  if [ -L "$avahi_cfg_path" ] && [ -d "$avahi_cfg_path" ]; then
    bashio::log.info "$avahi_cfg_path is a valid symbolic link"
  else
    if [ -L "$avahi_cfg_path" ]; then
      unlink "$avahi_cfg_path"
      bashio::log.info "$avahi_cfg_path unlinked"
    else
      rm -rf "$avahi_cfg_path"
      bashio::log.info "$avahi_cfg_path removed"
    fi
    ln -sn "$real_avahi_path" "$real_avahi_path/$avahi_daemon_cfg"
  fi

  if [ ! -e "$real_avahi_path/$avahi_daemon_cfg" ]; then
    autoconf_avahi
  fi
}

function run_setup() {
  if [ ! -d "$real_config_path" ]; then
    mkdir -p "$real_config_path"
  fi

  autoconf_setup
  setup_cups
  setup_avahi

  # find "$real_config_path" -type f -print0 | while IFS= read -r -d '' file; do
  #   bashio::log.info "Detected data file: $file"
  # done
}

run_setup
